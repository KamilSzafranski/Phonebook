{"version":3,"file":"static/js/214.13c48dc0.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/toast/dist/chunk-JFERWNZE.mjs","../node_modules/@chakra-ui/modal/dist/chunk-YLPWWAYV.mjs","components/AddContactModal/AddContactModal.chakraui.js","components/AddContactModal/AddContactModal.jsx","../node_modules/@chakra-ui/form-control/dist/chunk-3HLJVDJ7.mjs"],"sourcesContent":["import {\n  useToastOptionContext\n} from \"./chunk-ZP4IHIHZ.mjs\";\nimport {\n  createToastFn\n} from \"./chunk-RANSABEB.mjs\";\n\n// src/use-toast.tsx\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction useToast(options) {\n  const { theme } = useChakra();\n  const defaultOptions = useToastOptionContext();\n  return useMemo(\n    () => createToastFn(theme.direction, {\n      ...defaultOptions,\n      ...options\n    }),\n    [options, theme.direction, defaultOptions]\n  );\n}\nvar use_toast_default = useToast;\n\nexport {\n  useToast,\n  use_toast_default\n};\n","import {\n  useModalContext,\n  useModalStyles\n} from \"./chunk-UUGUEMMH.mjs\";\n\n// src/modal-close-button.tsx\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { cx, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar ModalCloseButton = forwardRef(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props;\n    const { onClose } = useModalContext();\n    const _className = cx(\"chakra-modal__close-btn\", className);\n    const styles = useModalStyles();\n    return /* @__PURE__ */ jsx(\n      CloseButton,\n      {\n        ref,\n        __css: styles.closeButton,\n        className: _className,\n        onClick: callAllHandlers(onClick, (event) => {\n          event.stopPropagation();\n          onClose();\n        }),\n        ...rest\n      }\n    );\n  }\n);\nModalCloseButton.displayName = \"ModalCloseButton\";\n\nexport {\n  ModalCloseButton\n};\n","export const phoneInputStyle = {\n  pattern: \"+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}\",\n  title:\n    \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n  required: true,\n};\n\nexport const nameInputStyle = {\n  id: \"name\",\n  name: \"name\",\n  pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n  title:\n    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  required: true,\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts, selectModal } from \"redux/selector\";\nimport { addContacts } from \"redux/phoneBook/phoneBook.thunk\";\nimport { ModalStatus } from \"redux/constant\";\nimport { closeModalAction } from \"redux/phoneBook/phoneBook.slice\";\nimport { phoneInputStyle, nameInputStyle } from \"./AddContactModal.chakraui\";\n\nconst AddContactModal = props => {\n  const toast = useToast();\n  const initialRef = useRef();\n  const dispatch = useDispatch();\n  const contact = useSelector(selectContacts);\n  const modal = useSelector(selectModal);\n\n  const handleCloseModal = () => dispatch(closeModalAction());\n\n  const handleAdd = event => {\n    event.preventDefault();\n    const {\n      name: { value: text },\n      number: { value: num },\n    } = event.currentTarget.elements;\n\n    const nameTaken = contact.some(elements => elements.name === text);\n    const numberTaken = contact.some(elements => elements.number === num);\n\n    if (nameTaken && numberTaken) {\n      return toast({\n        title: \"Warning\",\n        description: ` Contact ${text} is alredy in Phonebook`,\n        status: \"warning\",\n        duration: 1500,\n        isClosable: true,\n      });\n    }\n    dispatch(addContacts({ text, num }));\n  };\n\n  return (\n    <Modal\n      isOpen={modal === ModalStatus.ADD_CONTACT}\n      onClose={handleCloseModal}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>AddContact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <form onSubmit={handleAdd} id=\"formId\">\n            <FormControl>\n              <FormLabel htmlFor=\"Name\">First name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                sx={nameInputStyle}\n                ref={initialRef}\n              />\n              <FormLabel htmlFor=\"number\">Phone</FormLabel>\n              <Input\n                id=\"number\"\n                type=\"tel\"\n                name=\"number\"\n                sx={phoneInputStyle}\n              />\n            </FormControl>\n          </form>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} type=\"submit\" form=\"formId\">\n            Submit\n          </Button>\n          <Button onClick={handleCloseModal}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default AddContactModal;\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["useToast","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction","ModalCloseButton","forwardRef","props","ref","onClick","className","rest","onClose","useModalContext","_className","cx","styles","useModalStyles","jsx","CloseButton","__css","closeButton","callAllHandlers","event","stopPropagation","displayName","phoneInputStyle","pattern","title","required","nameInputStyle","id","name","toast","initialRef","useRef","dispatch","useDispatch","contact","useSelector","selectContacts","modal","selectModal","handleCloseModal","closeModalAction","isOpen","ModalStatus","pb","onSubmit","preventDefault","currentTarget","elements","text","value","num","number","nameTaken","some","numberTaken","description","status","duration","isClosable","addContacts","htmlFor","I","sx","type","colorScheme","mr","form","FormLabel","passedProps","_a","useStyleConfig","omitThemingProps","children","requiredIndicator","RequiredIndicator","optionalIndicator","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","display","textAlign","isRequired","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}