{"version":3,"file":"static/js/215.ddbfaf90.chunk.js","mappings":"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","sources":["components/ContactDetail/ContactDetail.jsx","../node_modules/@chakra-ui/form-control/dist/chunk-3HLJVDJ7.mjs","../node_modules/@chakra-ui/icons/dist/chunk-TEXEZHMQ.mjs"],"sourcesContent":["import { useLocation, useParams } from \"react-router-dom\";\nimport {\n  Avatar,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectContacts,\n  selectIsEditable,\n  selectisLoding,\n} from \"redux/selector\";\nimport { useEffect, useRef } from \"react\";\n\nimport { useMemo } from \"react\";\nimport { EditIcon } from \"@chakra-ui/icons\";\nimport { ModalStatus } from \"redux/constant\";\nimport {\n  setEditableAction,\n  setIdToDeleteAction,\n  openModalAction,\n} from \"redux/phoneBook/phoneBook.slice\";\nimport { patchContact } from \"redux/phoneBook/phoneBook.thunk\";\nimport { NavLink } from \"react-router-dom\";\nimport { CircleSpinner } from \"components/CircleSpinner/CircleSpinner\";\n\nconst ContactDetail = () => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const editable = useSelector(selectIsEditable);\n  const isLoading = useSelector(selectisLoding);\n  const allContacts = useSelector(selectContacts);\n  const location = useLocation();\n  const nameRef = useRef();\n  const numberRef = useRef();\n  const contact = useMemo(\n    () => allContacts.filter(element => element.id === id),\n    [allContacts, id]\n  );\n  const backLink = location?.state?.backLink ?? \"/contacts\";\n\n  useEffect(() => {\n    dispatch(setEditableAction(false));\n  }, [dispatch]);\n\n  useEffect(() => {\n    nameRef.current.value = contact[0]?.name ?? \"\";\n    numberRef.current.value = contact[0]?.number ?? \"\";\n  }, [contact, editable]);\n\n  const handleEditable = event => {\n    event.preventDefault();\n    dispatch(setEditableAction(!editable));\n  };\n\n  const handlePostContact = e => {\n    e.preventDefault();\n    const { name, phone } = e.currentTarget.elements;\n    const contact = {\n      name: name.value,\n      number: phone.value,\n      id,\n    };\n    dispatch(patchContact(contact));\n  };\n\n  const handleDelete = event => {\n    event.preventDefault();\n    dispatch(setIdToDeleteAction(id));\n    dispatch(openModalAction(ModalStatus.DELETE_ALERT));\n  };\n\n  return (\n    <>\n      {isLoading && <CircleSpinner pt=\"150px\" dissmension=\"250px\" />}\n\n      {!isLoading && (\n        <Box display=\"grid\" placeContent=\"center\" pt=\"50px\" position=\"relative\">\n          <Avatar\n            src=\"https://bit.ly/broken-link\"\n            alt=\"contact avatar\"\n            size=\"2xl\"\n            justifySelf=\"center\"\n            mb=\"20px\"\n          />\n          <form onSubmit={handlePostContact}>\n            <FormControl w=\"350px\" mb=\"15px\">\n              <FormLabel htmlFor=\"email\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                ref={nameRef}\n                focusBorderColor=\"teal.400\"\n                disabled={!editable}\n                variant=\"filled\"\n              />\n            </FormControl>\n            <FormControl w=\"350px\" mb=\"20px\">\n              <FormLabel htmlFor=\"password\">Number</FormLabel>\n              <Input\n                type=\"number\"\n                id=\"phone\"\n                name=\"phone\"\n                ref={numberRef}\n                disabled={!editable}\n                variant=\"filled\"\n                focusBorderColor=\"teal.400\"\n              />\n            </FormControl>\n\n            <FormControl display=\"flex\" justifyContent=\"center\">\n              <Button type=\"submit\" colorScheme=\"teal\" mr=\"15px\">\n                Change contact\n              </Button>\n              <Button type=\"button\" colorScheme=\"red\" onClick={handleDelete}>\n                Delete contact\n              </Button>\n            </FormControl>\n          </form>\n          <Box position=\"absolute\" top=\"10px\" right=\"10px\">\n            <Button\n              rightIcon={<EditIcon />}\n              onClick={handleEditable}\n              colorScheme=\"teal\"\n              mr=\"15px\"\n            >\n              {editable && \"Stop Edit\"}\n              {!editable && \"Edit\"}\n            </Button>\n            <NavLink to={backLink}>\n              <Button colorScheme=\"teal\">Go back</Button>\n            </NavLink>\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default ContactDetail;\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n","// src/Edit.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"none\", stroke: \"currentColor\", strokeLinecap: \"round\", strokeWidth: \"2\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" })\n  ] })\n});\n\nexport {\n  EditIcon\n};\n"],"names":["id","useParams","dispatch","useDispatch","editable","useSelector","selectIsEditable","isLoading","selectisLoding","allContacts","selectContacts","location","useLocation","nameRef","useRef","numberRef","contact","useMemo","filter","element","backLink","state","useEffect","setEditableAction","current","value","name","number","pt","dissmension","display","placeContent","position","src","alt","size","justifySelf","mb","onSubmit","e","preventDefault","currentTarget","elements","phone","patchContact","w","htmlFor","I","ref","focusBorderColor","disabled","variant","type","justifyContent","colorScheme","mr","onClick","event","setIdToDeleteAction","openModalAction","ModalStatus","top","right","rightIcon","to","FormLabel","forwardRef","passedProps","_a","styles","useStyleConfig","props","omitThemingProps","children","className","requiredIndicator","jsx","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","EditIcon","createIcon","path","fill","stroke","strokeLinecap","strokeWidth","d"],"sourceRoot":""}